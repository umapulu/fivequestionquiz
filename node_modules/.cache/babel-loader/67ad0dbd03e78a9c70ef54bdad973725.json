{"ast":null,"code":"var _jsxFileName = \"/Users/deepapulugurtha/Desktop/my-app/src/components/Cockpit/Cockpit.js\";\nimport React, { useEffect } from 'react';\nimport './Cockpit.css';\n\nconst cockpit = props => {\n  // if you want to base it on props then useState()\n  useEffect(() => {\n    //pass a function to useEffect and it will render\n    //every time cockpit runs\n    //rerenders for every update\n    //can send http request in here\n    console.log('[Cockpit.js] useEffect');\n    setTimeout(() => {\n      alert('Saved data to cloud!');\n    }, 1000), [props.persons];\n  }); //can useEffect as many times as u want\n  //send an empty array if you only want to see the first change\n\n  let btnClass = 'button';\n\n  if (props.showPersons) {\n    btnClass = 'buttonRed';\n  }\n\n  const assignedClasses = [];\n\n  if (props.persons.length <= 2) {\n    assignedClasses.push('red');\n  }\n\n  if (props.persons.length <= 1) {\n    assignedClasses.push('bold'); //classes will be red and bold\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, \" \", props.title, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    className: assignedClasses.join(' '),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \" This is really working\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: btnClass,\n    onClick: props.clicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, \"Toggle Persons\"));\n};\n\nexport default cockpit;","map":{"version":3,"sources":["/Users/deepapulugurtha/Desktop/my-app/src/components/Cockpit/Cockpit.js"],"names":["React","useEffect","cockpit","props","console","log","setTimeout","alert","persons","btnClass","showPersons","assignedClasses","length","push","title","join","clicked"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAO,eAAP;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAC3B;AACCF,EAAAA,SAAS,CAAC,MAAM;AACb;AACA;AACA;AACA;AACCG,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACDC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAAC,sBAAD,CAAL;AACH,KAFS,EAEP,IAFO,CAAV,EAEU,CAACJ,KAAK,CAACK,OAAP,CAFV;AAE0B,GARpB,CAAT,CAF0B,CAUM;AACjC;;AAEA,MAAIC,QAAQ,GAAG,QAAf;;AACA,MAAIN,KAAK,CAACO,WAAV,EACA;AACID,IAAAA,QAAQ,GAAG,WAAX;AACH;;AACG,QAAME,eAAe,GAAG,EAAxB;;AACH,MAAIR,KAAK,CAACK,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC9BD,IAAAA,eAAe,CAACE,IAAhB,CAAqB,KAArB;AACA;;AACD,MAAIV,KAAK,CAACK,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC9BD,IAAAA,eAAe,CAACE,IAAhB,CAAqB,MAArB,EAD8B,CACA;AAC9B;;AAEE,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMV,KAAK,CAACW,KAAZ,MADJ,eAEI;AAAG,IAAA,SAAS,EAAIH,eAAe,CAACI,IAAhB,CAAqB,GAArB,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFJ,eAGI;AAAQ,IAAA,SAAS,EAAIN,QAArB;AACA,IAAA,OAAO,EAAEN,KAAK,CAACa,OADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,CADJ;AAWH,CArCD;;AAuCA,eAAed,OAAf","sourcesContent":["import React, {useEffect} from 'react';\n\nimport './Cockpit.css';\n\nconst cockpit = (props) => {\n// if you want to base it on props then useState()\n useEffect(() => { \n    //pass a function to useEffect and it will render\n    //every time cockpit runs\n    //rerenders for every update\n    //can send http request in here\n     console.log('[Cockpit.js] useEffect');\n    setTimeout(() => {\n        alert('Saved data to cloud!');\n    }, 1000), [props.persons]}); //can useEffect as many times as u want\n//send an empty array if you only want to see the first change\n\nlet btnClass = 'button';\nif (props.showPersons)\n{\n    btnClass = 'buttonRed';\n}\n    const assignedClasses = [];\n if (props.persons.length <= 2) {\n  assignedClasses.push('red'); \n }\n if( props.persons.length <= 1) {\n  assignedClasses.push('bold'); //classes will be red and bold\n }\n    \n    return (\n        <div>\n            <h1> {props.title} </h1>\n            <p className = {assignedClasses.join(' ')}> This is really working</p>\n            <button className = {btnClass}\n            onClick={props.clicked}> \n            Toggle Persons \n            </button>\n        </div>\n        )\n\n};\n    \nexport default cockpit;"]},"metadata":{},"sourceType":"module"}