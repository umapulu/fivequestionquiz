{"ast":null,"code":"var _jsxFileName = \"/Users/deepapulugurtha/Desktop/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport QuestionData from './Question/questions.json';\nimport './App.css';\nimport Question from './Question/Question'; //initializes App class\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      submit: null,\n      showInstructions: false,\n      userAnswers: [],\n      quizResults: {},\n      showResults: false\n    };\n\n    this.toggleInstructionsHandler = () => {\n      const doesShow = this.state.showInstructions;\n      this.setState({\n        showInstructions: !doesShow\n      });\n    };\n\n    this.createQuestionsArray = () => {\n      this.setState({\n        userAnswers: [null, null, null, null, null]\n      }, () => {//console.log(this.state.userAnswers) uncomment to monitor state\n      });\n      let questionsList = [];\n      QuestionData.map((question, index) => {\n        return questionsList.push(question);\n      });\n      var randomNums = [];\n      var questions5 = [];\n\n      while (randomNums.length < 5) {\n        var r = Math.floor(Math.random() * 50);\n\n        if (randomNums.indexOf(r) === -1) {\n          randomNums.push(r);\n          questions5.push(questionsList[r]);\n        }\n\n        ;\n      }\n\n      this.setState({\n        questions: questions5\n      });\n      this.setState({\n        submit: /*#__PURE__*/React.createElement(\"button\", {\n          onClick: this.checkAnswers,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 9\n          }\n        }, \"Submit\")\n      });\n    };\n\n    this.answerSelectedHandler = (event, id) => {\n      const questionIndex = this.state.questions.findIndex(q => {\n        return q.id === id;\n      });\n      const answers = [...this.state.userAnswers];\n      answers[questionIndex] = event.target.value;\n      this.setState({\n        userAnswers: answers\n      }, () => {//console.log(this.state.userAnswers); uncomment to monitor state\n      });\n    };\n\n    this.inputChangedHandler = (event, id) => {\n      const questionIndex = this.state.questions.findIndex(q => {\n        return q.id === id;\n      });\n      const question = { ...this.state.questions[questionIndex]\n      };\n      question.options = event.target.value;\n      const questions = [...this.state.questions];\n      questions[questionIndex] = question;\n      this.setState({\n        questions: questions\n      });\n      const answers = [...this.state.userAnswers];\n      answers[questionIndex] = event.target.value;\n      this.setState({\n        userAnswers: answers\n      }, () => {//console.log(this.state.userAnswers); uncomment to monitor state\n      });\n    };\n\n    this.checkAnswers = () => {\n      for (var x = 0; x < 5; x++) {\n        if (this.state.userAnswers[x] === null) {\n          alert(\"Please fill out all questions before submitting\");\n          return;\n        }\n      }\n\n      var incorrect = [];\n      var correct = [];\n      var numCorrect = 0;\n\n      for (var y = 0; y < 5; y++) {\n        if (this.state.userAnswers[y] === this.state.questions[y].answer) {\n          numCorrect++;\n          correct.push(this.state.questions[y]);\n          localStorage.setItem(this.state.questions[y].id, \"correct\");\n        } else {\n          incorrect.push(this.state.questions[y]);\n          localStorage.setItem(this.state.questions[y].id, \"incorrect\");\n        }\n      }\n\n      this.setState({\n        questions: []\n      });\n      this.setState({\n        submit: null\n      });\n      this.setState({\n        quizResults: {\n          numCorrect: numCorrect,\n          incorrect: incorrect,\n          correct: correct\n        }\n      });\n      this.setState({\n        showResults: true\n      });\n    };\n\n    this.returnHandler = () => {\n      this.setState({\n        showResults: false\n      });\n    };\n  }\n\n  //renders elements into the interface\n  render() {\n    let instructions = null; //if the user has decided to open the instructions,\n    //the following instructions are displayed\n\n    if (this.state.showInstructions) {\n      instructions = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }\n      }), \"Welcome to the FBLA 5 Question Quiz! \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 46\n        }\n      }), \"Please fill out the following 5 questions \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 51\n        }\n      }), \"and click submit to receive your answer. \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 50\n        }\n      }), \"Refresh to receive a new set of questions. \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 52\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }), \"Q: How do I get my results? \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 37\n        }\n      }), \"A: Submit answers and click on the summary link! \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 58\n        }\n      }), \"Q: How many questions are available?\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 45\n        }\n      }), \"A: There are 50 unique questions! \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 43\n        }\n      }), \"Q: Do I have to take the first quiz that come up?\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 58\n        }\n      }), \"A: You can use the \\\"Click to Generate Questions\\\" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 58\n        }\n      }), \"button as many times as you would like. \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 49\n        }\n      }), \"Q: What is generated in the results?\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 45\n        }\n      }), \"A: You will able to see your score, correct and \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 57\n        }\n      }), \"incorrect questions\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 28\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }\n      }));\n    } //creates a variable qustions which holds all of the question elements\n    //which will be displayed on screen\n\n\n    let questions = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    }, this.state.questions.map((question, index) => {\n      return /*#__PURE__*/React.createElement(Question, {\n        id: question.id,\n        key: question.id,\n        question: question.question,\n        answer: question.answer,\n        options: question.options,\n        qType: question.qType,\n        changedInput: event => this.inputChangedHandler(event, question.id),\n        selected: event => this.answerSelectedHandler(event, question.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 18\n        }\n      });\n    })); //displays the starting content (instructions and generate questions buttons)\n\n    let content = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: 'btnClass',\n      onClick: this.toggleInstructionsHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }, \"Click To Open/Close Instructions\"), instructions, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.createQuestionsArray,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, \" Click to Generate Questions\"), questions, this.state.submit); //if the user has decided to show results, the screen only shows the \n    //data stored in quizResults\n\n    if (this.state.showResults) {\n      content = /*#__PURE__*/React.createElement(\"div\", {\n        className: 'box',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }\n      }), \"You received \", this.state.quizResults.numCorrect, \" out of 5 points \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 80\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 15\n        }\n      }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 25\n        }\n      }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 35\n        }\n      }), /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 14\n        }\n      }, \" These were the questions you got correct: \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 65\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 74\n        }\n      }), this.state.quizResults.correct.map((question, index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 26\n          }\n        }, question.question, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 21\n          }\n        }), \"Correct Answer: \", question.answer, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 20\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 20\n          }\n        }));\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 14\n        }\n      }, \" These were the questions you got incorrect: \"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 66\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 14\n        }\n      }), this.state.quizResults.incorrect.map((question, index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 26\n          }\n        }, question.question, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 21\n          }\n        }), \"Correct Answer: \", question.answer, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 21\n          }\n        }));\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.returnHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 14\n        }\n      }, \"Return to Start\"));\n    } //this is what is exported through \"export default App\" at the bottom\n    //of the screen\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: 'App',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, \"FBLA 5 Question Quiz\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }\n    }, \"Test Your Knowledge of FBLA and its History\"), content, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 54\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 63\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 72\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 81\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 90\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 99\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 108\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/deepapulugurtha/Desktop/my-app/src/App.js"],"names":["React","Component","QuestionData","Question","App","state","questions","submit","showInstructions","userAnswers","quizResults","showResults","toggleInstructionsHandler","doesShow","setState","createQuestionsArray","questionsList","map","question","index","push","randomNums","questions5","length","r","Math","floor","random","indexOf","checkAnswers","answerSelectedHandler","event","id","questionIndex","findIndex","q","answers","target","value","inputChangedHandler","options","x","alert","incorrect","correct","numCorrect","y","answer","localStorage","setItem","returnHandler","render","instructions","qType","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport QuestionData from './Question/questions.json';\nimport './App.css';\nimport Question from './Question/Question';\n\n//initializes App class\nclass App extends Component {\n  //holds current state of variables which are modified by user\n  state = {\n    questions: [\n\n    ],\n    submit: null,\n    showInstructions: false,\n    userAnswers: [],\n    quizResults: {},\n    showResults: false\n  }\n\n  //opens and closes the instructions\n  toggleInstructionsHandler = () => {\n    const doesShow = this.state.showInstructions;\n    this.setState({ showInstructions: !doesShow });\n  }\n  \n  //activated by the \"Click to Generate Questions\" button\n  //creates an array with 5 random questions out of the 50 questions in the data\n  //adds a submit button which checks answers to the bottom of the screen\n  createQuestionsArray = () => {\n\n    this.setState({ userAnswers: [null, null, null, null, null] }, () => {\n      //console.log(this.state.userAnswers) uncomment to monitor state\n    }\n    )\n\n    let questionsList = [];\n    \n    QuestionData.map((question, index) => {\n      return questionsList.push(question);\n\n    })\n    var randomNums = [];\n    var questions5 = [];\n    while (randomNums.length < 5) {\n      var r = Math.floor(Math.random() * 50);\n      if (randomNums.indexOf(r) === -1) {\n        randomNums.push(r);\n        questions5.push(questionsList[r]);\n      }\n      ;\n    }\n    this.setState({ questions: questions5 });\n\n    this.setState({\n      submit:\n        <button onClick={this.checkAnswers}>\n          Submit\n      </button>\n    })\n\n  };\n\n//stores the answers selected using radio inputs \n  //into the array in state holding the user's answers\n  answerSelectedHandler = (event, id) => {\n    const questionIndex = this.state.questions.findIndex(q => {\n      return q.id === id;\n    });\n\n    const answers = [...this.state.userAnswers];\n    answers[questionIndex] = event.target.value;\n    this.setState({ userAnswers: answers }, () => {\n      //console.log(this.state.userAnswers); uncomment to monitor state\n    });\n  }\n\n  //stores the answers inputed by the user through text \n  //into the array in state holding the user's answers\n  inputChangedHandler = (event, id) => {\n    const questionIndex = this.state.questions.findIndex(q => {\n      return q.id === id;\n    });\n\n    const question = {\n      ...this.state.questions[questionIndex]\n    };\n    question.options = event.target.value;\n    const questions = [...this.state.questions];\n    questions[questionIndex] = question;\n    this.setState({ questions: questions });\n\n\n    const answers = [...this.state.userAnswers];\n    answers[questionIndex] = event.target.value;\n    this.setState({ userAnswers: answers }, () => {\n      //console.log(this.state.userAnswers); uncomment to monitor state\n    });\n\n  }\n\n//activated by the submit button\n//checks to see all answers are responded to \n//calculates the total correct/incorrect\n//changes state to display these questions\n//adds data to the quizResults in state\n  checkAnswers = () => {\n    for (var x = 0; x < 5; x++) {\n      if (this.state.userAnswers[x] === null) {\n        alert(\"Please fill out all questions before submitting\")\n        return;\n      }\n    }\n    var incorrect = [];\n    var correct = [];\n    var numCorrect = 0;\n    for (var y = 0; y < 5; y++) {\n      if (this.state.userAnswers[y] === this.state.questions[y].answer) {\n        numCorrect++;\n        correct.push(this.state.questions[y]);\n        localStorage.setItem(this.state.questions[y].id, \"correct\");\n      }\n      else {\n        incorrect.push(this.state.questions[y]);\n        localStorage.setItem(this.state.questions[y].id, \"incorrect\");\n      }\n\n    }\n    this.setState({ questions: [] })\n    this.setState({ submit: null })\n    this.setState({quizResults: {numCorrect: numCorrect, incorrect: incorrect, correct: correct}})\n    this.setState({showResults: true})\n  }\n\n //changes the state of showResults, allowing the \n //user to exit results and go back to the starting\n //screen\nreturnHandler = () => {\n  this.setState({showResults: false})\n}\n//renders elements into the interface\n  render() {\n    let instructions = null;\n\n    //if the user has decided to open the instructions,\n    //the following instructions are displayed\n    if (this.state.showInstructions) {\n      instructions = (<div className = \"box\">\n        <br></br>\n        <br></br>\n        Welcome to the FBLA 5 Question Quiz! <br></br>\n        Please fill out the following 5 questions <br></br>\n        and click submit to receive your answer. <br></br>\n        Refresh to receive a new set of questions. <br></br>\n        <br></br>\n        <br></br>\n        Q: How do I get my results? <br></br>\n        A: Submit answers and click on the summary link! <br></br>\n        Q: How many questions are available?<br></br>\n        A: There are 50 unique questions! <br></br>\n        Q: Do I have to take the first quiz that come up?<br></br>\n        A: You can use the \"Click to Generate Questions\" <br></br>\n        button as many times as you would like. <br></br>\n        Q: What is generated in the results?<br></br>\n        A: You will able to see your score, correct and <br></br>\n        incorrect questions<br></br>\n   \n        <br></br>\n        <br></br>\n      </div>);\n\n    }\n//creates a variable qustions which holds all of the question elements\n//which will be displayed on screen\n    let questions = (\n      <div>\n        {this.state.questions.map((question, index) => {\n\n          return <Question\n            id={question.id}\n            key = {question.id}\n            question={question.question}\n            answer={question.answer}\n            options={question.options}\n            qType={question.qType}\n            changedInput={(event) => this.inputChangedHandler(event, question.id)}\n            selected={(event) => this.answerSelectedHandler(event, question.id)}\n          />\n        })}\n\n      </div>\n    )\n\n    //displays the starting content (instructions and generate questions buttons)\n        let content = \n        (<div>\n            <button\n                className={'btnClass'}\n                onClick={this.toggleInstructionsHandler}>Click To Open/Close Instructions</button>\n                {instructions}\n            <button\n                  onClick={this.createQuestionsArray}> Click to Generate Questions\n            </button>\n                {questions}\n                {this.state.submit}\n        </div> );\n//if the user has decided to show results, the screen only shows the \n//data stored in quizResults\n        if (this.state.showResults){\n            content = (\n              <div className={'box'}>\n                <br></br>\n              You received {this.state.quizResults.numCorrect} out of 5 points <br></br>\n              <br></br> <br></br> <br></br>\n             <b> These were the questions you got correct: </b> <br></br><br></br>\n    \n              {this.state.quizResults.correct.map((question, index) =>{\n                  return <div >\n                    {question.question} \n                    <br></br>\n                   Correct Answer: {question.answer}\n                   <br></br>\n                   <br></br>\n                        </div>\n              })}\n              <br></br>\n             \n             <b> These were the questions you got incorrect: </b><br></br> \n             <br></br>\n              {this.state.quizResults.incorrect.map((question, index) =>{\n                  return <div >\n                    {question.question} \n                    <br></br>\n                    Correct Answer: {question.answer}\n                    <br></br>\n                    <br></br>\n                    \n                        </div>\n              })}\n             <button onClick = {this.returnHandler}>Return to Start</button>\n              </div>\n            );\n        }\n//this is what is exported through \"export default App\" at the bottom\n//of the screen\n    return (\n      <div className={'App'}>\n        <h1>FBLA 5 Question Quiz</h1>\n        <h3>Test Your Knowledge of FBLA and its History</h3>\n      {content}\n        <br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br><br></br>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}